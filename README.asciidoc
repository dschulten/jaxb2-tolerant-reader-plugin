= jaxb2-tolerant-reader-plugin
:toc:
:toc-placement: preamble

XJC plugin to restrict marshalled data according to the TolerantReader pattern.


== Motivation
Sometimes you have an extensive system of schema files with lots of classes and attributes, at times so large that developers struggle with the richness of the schema.
Furthermore, the schema might evolve in incompatible ways for reasons which are out of your control.

The client on the other hand uses only a tiny fraction of the types from the schema. As a developer, I do not want to bother with an enormous tree of classes I don't understand and I want no changes to affect my code base which are irrelevant to my client.

The goal of this plugin is to handle this situation by applying ideas of http://martinfowler.com/bliki/TolerantReader.html[TolerantReader] to JAXB. In an attempt to eat the cake and have it, too, I want to generate beans from the schema, but I want to be able to depend only on the data I care about, and most importantly, I still want to avoid the http://www.alwaysagileconsulting.com/articles/application-antipattern-serialisation/[serialization antipattern] of enterprise integration.

I want to use the incoming xml as a _business document_ defined in terms of a schema by creating a Java bean from it, but not by deserializing it as a remote binary object. I want to decouple my Java bean from the evolution of the schema as much as possible, thus at least partially avoiding the http://blog.iancartwright.com/2006/11/dangers-of-serialization.html[dangers of serialization].

Note that schema changes might still require regeneration and recompilation of the client code. The goal is that at least this should be all there is to do, and that I get immediate feedback when the schema change breaks my client, so I can fix the breaking change at the root.

The plugin configuration can also be handed to the service as an executable description of my client expectations.
It could be http://martinfowler.com/articles/consumerDrivenContracts.html[used as a test] by the service to see which client will break upon any given change.

The current version allows to restrict beans and attributes. In situations where the schema uses versioned namespaces, apply https://jaxb.java.net/guide/Customizing_Java_packages.html[custom java packages] to further decouple your beans. Note that the original namespace is preserved during marshalling from the package definition in package-info.java.

== First steps
To set up the plugin for a maven build, use the maven-jaxb2-plugin.
In the maven plugin configuration add the jaxb2-tolerant-reader xjc plugin and make sure you enable xjc extension mode. The https://github.com/dschulten/jaxb2-tolerant-reader-plugin/tree/master/tests/person[tests/person subproject] shows how.
The plugin is activated via the -Xtolerant-reader switch.

== Manual execution
In launch and debug configurations one can execute the plugin via the `com.sun.tools.xjc.Driver` Java main class, with the tolerant-reader-plugin on the classpath.

    com.sun.tools.xjc.Driver

Use the _tests/person_ project as current working directory of the launch configuration and pass the following arguments:

    -extension -no-header -d target -Xtolerant-reader -b src/main/wsdl/bindings.xjb src/main/wsdl/Person.xsd


== Configuration: Include Required Data Only
The idea is to require only the Java beans and bean attributes your client really needs and be tolerant about the rest.
For this, you define a binding file with an `include` element on the schema level where you describe beans that should be generated.


=== Example
The configuration takes place in the bindings.xjb file. In the sample binding below we use the extension binding prefix `tr` to bind the tolerant-reader plugin namespace.

----
<jxb:bindings version="2.1" xmlns:jxb="http://java.sun.com/xml/ns/jaxb"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:tr="http://jaxb2-commons.dev.java.net/tolerant-reader"
	xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
	jxb:extensionBindingPrefixes="xjc tr">
	<jxb:globalBindings>
		<xjc:simple />
		<xjc:serializable uid="1" />
	</jxb:globalBindings>

	<jxb:bindings schemaLocation="schema.xsd">
		<tr:include packageRoot="com.example.customer" bean="Person" 
		  properties="name age shippingAddress"/>
		<tr:include bean="BaseAddress" properties="addr1 city"/>
		<tr:include bean="USAddress" properties="state zip"/>
		<tr:include bean="GlobalAddress" properties="postalCode country"/>
		
		<!-- property firstName will be included as-is, 
			property lastName will appear as givenName -->
		<tr:include bean="Name" properties="firstName">
		  <tr:alias property="lastName">givenName</tr:alias>
		</tr:include>	
	</jxb:bindings>
</jxb:bindings>
----

=== include element
Add one include element for each bean you need. Super classes will be included automatically.

==== bean attribute
Simple name of the expected bean. If no packageRoot is given, the bean will be included regardless of its package. Use in conjunction with `packageRoot` to narrow down matching beans.

==== packageRoot attribute (optional)
If `packageRoot` is present, the bean will only be included if it is in a package starting with the value given for `packageRoot`.
This allows to handle situations where you only want a bean in one package, but not a bean having the same simple name from another package. In the example above, `com.example.customer.v1.Person` will be included whereas `com.example.employee.v3.Person` will not be included.

==== properties attribute
List of expected bean properties as space-separated strings. You have to define all properties which should be generated.
If an included property has a complex type, the bean for that type will be included automatically.

==== alias element
List of aliased properties to include inside an include element, can be used in combination with the properties attribute.

===== property attribute
Property name of an alias element

== Acknowledgements
David Tiller, https://www.captechconsulting.com/blogs/make-a-surgical-strike-with-a-custom-xjc-plugin[Make a Surgical Strike with a Custom XJC Plugin] and http://www.captechconsulting.com/blogs/extending-xjc-functionality-with-a-custom-plugin[Extending XJC Functionality With a Custom Plugin]+
Dr. Aleksei Valikov, whose http://stackoverflow.com/questions/32560138/tell-jaxb-binding-compiler-which-elements-to-include[answer on stackoverflow] encouraged me to write this plugin
